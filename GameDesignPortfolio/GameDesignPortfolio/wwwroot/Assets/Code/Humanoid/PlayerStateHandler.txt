using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerStateHandler : MonoBehaviour
{
    // Get the PlayerMovement script for certain booleans used in switching states
    [SerializeField]
    PlayerMovement pM;
    // Get the animator of the player to switch animations
    [SerializeField]
    Animator animator;

    // Enum to hold all the states for the player
    private enum playerStates
    {
        idle, 
        walking, 
        running, 
        jumping,
        falling,
        die
    }

    // Initialize and declare the playerCurrentState to hold the player states
    private playerStates playerCurrentState = playerStates.idle;

    /// <summary>
    /// Update() get's called every frame
    /// </summary>
    private void Update()
    {
        switch (playerCurrentState)
        {
            case playerStates.idle:
                Idle();
                break;
            case playerStates.walking:
                Walk();
                break;
            case playerStates.running:
                Run();
                break;
            case playerStates.jumping:
                Jump();
                break;
            case playerStates.falling:
                Falling();
                break;
            case playerStates.die:
                Die();
                break;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.idle
    /// </summary>
    private void Idle()
    {
        // play Idle animation
        animator.Play("Idle00-Idle0");

        // if the player is moving and running is not true switch to walking state
        if ((pM.getHorizontalInput != 0 || pM.getVerticalInput != 0) && !pM.getRunning)
        {
            playerCurrentState = playerStates.walking;
        }

        // if the player is moving and running is true switch to running state
        if ((pM.getHorizontalInput != 0 || pM.getVerticalInput != 0) && pM.getRunning)
        {
            playerCurrentState = playerStates.running;
        }

        // if the player is jumping (going up) switch to jumping state
        if (pM.getJumping)
        {
            playerCurrentState = playerStates.jumping;
        }

        // if the player is falling (going down) switch to falling state
        if (pM.getFalling)
        {
            playerCurrentState = playerStates.falling;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.walking
    /// </summary>
    private void Walk()
    {
        // play Walk animation
        animator.Play("Walk00-Walk0");

        // if the player is standing still switch to idle state
        if (pM.getHorizontalInput == 0 && pM.getVerticalInput == 0)
        {
            playerCurrentState = playerStates.idle;
        }

        // if the player is moving and running is true switch to running state
        if ((pM.getHorizontalInput != 0 || pM.getVerticalInput != 0) && pM.getRunning)
        {
            playerCurrentState = playerStates.running;
        }

        // if the player is jumping (going up) switch to jumping state
        if (pM.getJumping)
        {
            playerCurrentState = playerStates.jumping;
        }

        // if the player is falling (going down) switch to falling state
        if (pM.getFalling)
        {
            playerCurrentState = playerStates.falling;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.running
    /// </summary>
    private void Run()
    {
        // play Running animation
        animator.Play("Run00-Run0");

        // if the player is standing still switch to idle state
        if (pM.getHorizontalInput == 0 && pM.getVerticalInput == 0)
        {
            playerCurrentState = playerStates.idle;
        }

        // if the player is jumping (going up) switch to jumping state
        if (pM.getJumping)
        {
            playerCurrentState = playerStates.jumping;
        }

        // if the player is falling (going down) switch to falling state
        if (pM.getFalling)
        {
            playerCurrentState = playerStates.falling;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.jumping
    /// </summary>
    private void Jump()
    {
        // Play Jumping animation
        animator.Play("Jump00-Jump0");

        // If the player is falling (going down) switch to falling state
        if (pM.getFalling)
        {
            playerCurrentState = playerStates.falling;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.falling
    /// </summary>
    private void Falling()
    {
        // Play Falling animation
        // Currently don't have falling animation yet

        // if the player is standing still switch to idle state
        if (pM.getHorizontalInput == 0 && pM.getVerticalInput == 0 && pM.getGrounded)
        {
            playerCurrentState = playerStates.idle;
        }

        // if the player is moving and running is not true switch to walking state
        if ((pM.getHorizontalInput != 0 || pM.getVerticalInput != 0) && !pM.getRunning && pM.getGrounded)
        {
            playerCurrentState = playerStates.walking;
        }

        // if the player is moving and running is true switch to walking running
        if ((pM.getHorizontalInput != 0 || pM.getVerticalInput != 0) && pM.getRunning && pM.getGrounded)
        {
            playerCurrentState = playerStates.running;
        }

        // if the player is falling (going down) switch to falling state
        if (pM.getFalling)
        {
            playerCurrentState = playerStates.falling;
        }
    }

    /// <summary>
    /// Method that get's called when the player state is playerStates.die
    /// </summary>
    private void Die()
    {
        // play Death Animation
        // play Death Sound Effect
    }
}
